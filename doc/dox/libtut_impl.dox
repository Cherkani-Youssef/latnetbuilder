// This file is part of LatNet Builder.
//
// Copyright (C) 2012-2018  Pierre L'Ecuyer and Universite de Montreal
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! \page libtut_impl Implementation Notes

\section libtut_impl_func_args Function Arguments

In LatNet Builder, there are three different types of declarations of function
arguments:
\code
void f(const T& x) // if f only reads x
void f(T& x)       // if f writes to x
void f(T x)        // if f needs a copy of x
\endcode
Although the first prototype allows \c f to make a copy of \c x internally, it
is best to leave it to the compiler to do it.  For example, the following code
will cause two instantiations of objects of type \c T:
\code
void f(const T& x) { T y = x; y.modify(); }
...
f(T());
\endcode
whereas the following allows the compiler to instantiate only one object of type
\c T:
\code
void f(T y) { y.modify(); }
...
f(T());
\endcode

\section libtut_impl_seq Sequence

In multiple situations, LatNet Builder needs to access arrays of values that
can interchangeably be computed on-the-fly or pre-computed.  The concept of
<em>sequence</em>, in the sense of ordered list rather than infinite
mathematical sequence, provides in LatNet Builder a unified interface for both.
The elements of a sequence are accessed via immutable iterators (\c
const_iterator) with the standard syntax as used for the standard C++
containers, as in the following example:
\code
MySeq seq; // must implement begin() and end()
for (MySeq::const_iterator it = seq.begin(); it != seq.end(); ++it)
   std::cout << *it << std::endl;
\endcode
Or, using the new C++11 \c auto keyword and \c for syntax:
\code
MySeq seq; // must implement begin() and end()
for (const auto& elem : seq)
   std::cout << elem << std::endl;
\endcode
Concrete examples are given in the tutorial in sections \ref libtut_lat_genseq,
\ref libtut_lat_latseq and \ref libtut_lat_meritseq .

\sa
   LatBuilder::GenSeq
   LatBuilder::GenSeqSeq
   LatBuilder::LatSeq
   LatBuilder::MeritSeq

\remark
   The LatBuilder::TextStream namespace provides streaming operators to
   iterate over sequences with a more compact syntax:
   \code
   using TextStream::operator<<;
   MySeq seq; // must implement begin() and end()
   std::cout << seq << std::endl;
   \endcode
   Concrete examples are given in the tutorial in section \ref libtut_lat_textstream .


\section libtut_impl_bridgeseq Bridge Sequence

The values in a sequence often need to be mapped to other values, possibly of a
different type.  For that purpose, LatNet Builder introduces the concept of a
<em>bridge sequence</em>, which contains the mapped elements in the same order
as the sequence it is based on.

\sa LatBuilder::BridgeSeq


\section libtut_impl_polymorphism Static Polymorphism

Traditional object-oriented programming makes use of dynamic polymorphism, where
the exact class of an object is resolved at execution time, dynamically.  It
follows that polymorphic member function calls cannot be inlined, so it is often
not advisable to place such a call in the core of a loop with many iterations,
at the risk of cumulating inderections due to both polymorphism and function
calls.

Some algorithms implemented by LatNet Builder come in several variants which
require either polymorphic function calls inside such loops or a large amount
of duplicated code with tiny differences.  C++ allows to circumvent that
problem through the use of <em>static polymorphism</em>, which enables
compile-time resolution of the types together with member function inlining.

In some places, static polymorphism is used regardless that dynamic
polymorphism could have been used without any notable performance loss, in
order to maintain a consistent design.  We prefer making common usage
patterns of LatNet Builder's classes easier to recognize, even if that means
a little bit more verbose code in places.

The most obvious example is the case of sequence classes.  Their member
functions \c begin()  and \c end() return iterators; the type of an iterator
is often specific to the type of the sequence it is pointing to.

Another example is the size parameter is represented by a different class
depending on
whether ordinary or embedded lattices are considered.  In both cases, the class
implements a \c numPoints() member function, that returns the number of points
in the lattice, and that is accessed frequently in some parts of the code.  In a
traditional object-oriented approach, the two classes would derive from the same
abstract base class, and would have required runtime object-type resolution at
the call points of \c numPoints().  With the static polymorphism approach, the
\c numPoints() function can be efficiently inlined by the compiler, thus
avoiding both the overhead due to the function call and to runtime object-type
resolution.



\section libtut_impl_concepts Concept

Concepts in C++ can be thought of as the static-polymorphism counterpart of
dynamic-polymorphism interfaces.  Like interfaces, concepts can specify
requirements on the members of a class; unlike interfaces, the data types of the
arguments and of the return value of a member function can differ across classes
implementing the same concept.  Furthermore, a concept can require type
definitions (typedefs or nested classes) inside of a class.
A well-known example of concept it that of \c iterator or of \c const_iterator
from the STL.

Although requirements on the types are not described with concepts
definitions in LatNet Builder, but the code is built around the
idiom of concepts.

By convention in LatNet Builder, classes representing the same concept are
regrouped in the same namespace.

The most important concepts are described by means of example in the \ref
libtut.



\section libtut_impl_memory Memory Management

In LatNet Builder, when a non-trivial object is no longer needed in its scope
after it is passed as an argument to a constructor or factory function, it is
generally std::move()'d to the constructor or function in question.
The compiler takes care of using the default move constructor on the object
that is passed to the constructor and thus avoids copying the object, which can
safely be stored as a class member of the `owner' object.
Generator sequences (see the GenSeq namespace) are an example of non-trivial
objects that are transferred to other  Ì€owner' objects using this mechanism.
Weights objects, such as instances of LatticeTester::ProductWeights or of
LatticeTester::ProjectionDependentWeights, are other examples of non-trivial
objects, but because they are polymorphic, they are stored using a
std::unique_ptr, which in turn, is passed using either std::move() or,
equivalently, std::unique_ptr::release().
There are a few exceptions to that ownership policy, notably figures of merit
like instances of WeightedFigureOfMerit or of CoordUniformFigureOfMerit.
Some classes store references to such objects, so the objects themselves are
also stored using std::unique_ptr so that references remain valid even after
the object ownership has changed.



\section libtut_impl_cpp11 Usage of the C++11 Standard

LatNet Builder makes uses of the following C++11 features:
- auto-typed variables
- range-based for-loop
- std::function and std::bind
- rvalue references
- move constructors and assignment operators
- static assertions
- extern templates
- null pointer constant
- strongly typed enums
- initializer lists
- non-static data member initializers
- template aliases



\section libtut_impl_boost Usage of the Boost C++ Libraries

The LatNet Builder library depends on the following
<a href="http://www.boost.org/">Boost libraries</a>:
<ul>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/libs/math/doc/html/index.html">Math</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/libs/numeric/ublas/doc/index.html">uBLAS</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/libs/iterator/doc/index.html">Iterator</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/doc/html/accumulators.html">Accumulators</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/doc/html/signals2.html">Signals2</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/libs/tokenizer/index.html">Tokenizer</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/doc/html/boost_lexical_cast.html">Lexical Cast</a></li>
	<li><a href="https://www.boost.org/doc/libs/1_67_0/doc/html/program_options.html">Program Options</a></li>
    <li><a href="https://www.boost.org/doc/libs/1_67_0/libs/algorithm/doc/html/index.html"> Algorithm</a></li>
    <li><a href="https://www.boost.org/doc/libs/1_67_0/libs/system/doc/index.html"> System</a></li>
    <li><a href="https://www.boost.org/doc/libs/1_67_0/libs/filesystem/doc/index.htm"> Filesystem</a></li>
</ul>

Only the Program Options, the System and the Filesystem libraries require building and linking; the
others are header-only libraries.

\section libtut_impl_fftw Usage of FFTW

The fast CBC implementation of LatNet Builder, as well as the computation of
the \f$R_\alpha\f$ criterion, depends on the
<a href="http://www.fftw.org/">FFTW library</a>.

\section libtut_impl_ntl Usage of NTL

LatNet Builder also depends on the <a href="http://www.shoup.net/ntl/">NTL library</a> for arithmetic computations 
(lattices, polynomials, etc.).

\section libtut_impl_latticetester Usage of the LatticeTester

LatNet Builder uses <a href="https://github.com/umontreal-simul/latticetester"> LatticeTester</a>, a software library to compute theoretical measures of uniformity for
lattices. This library is embedded in the code source of LatNet Builder and in the binary distribution packages  

*/
vim: ft=doxygen spelllang=en spell
