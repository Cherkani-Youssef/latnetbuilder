import csv
import numpy as np

s = {{s}}
m = {{m}}
init_numbers = {{init_numbers}}
prim_polys = np.array({{prim_polys}})
interlacing = {{interlacing}}

def bin_array(num, m):
    """Convert a positive integer num into an m-bit bit vector"""
    return np.array(list(np.binary_repr(num).zfill(m))).astype(np.int8)

def sobol_generating_matrix(coord,init_numbers,m):
    C = np.eye(m,dtype = np.int)
    if coord==1:
        return C
    degree = prim_polys[coord-2,0]
    a = np.zeros(degree,dtype=np.int)
    a[:-1] = bin_array(prim_polys[coord-2,1],degree-1)
    a[-1] = 1
    exp = np.array([2<<k for k in range(degree)])
    a = a*exp
    assert len(init_numbers)==degree
    for k in range(min(degree,m)):
        assert init_numbers[k] < (2<<k)
        assert init_numbers[k] % 2 == 1
        C[:k, k] = bin_array(init_numbers[k],k+1)[:k]
    tmp = np.flipud(np.copy(init_numbers))
    for k in range(degree,m):
        new_num = np.bitwise_xor.reduce(tmp*a) ^ tmp[-1]
        tmp[1:]=tmp[:-1]
        tmp[0] = new_num
        C[:k,k] = bin_array(new_num,k+1)[:k]
    return C

matrices = [sobol_generating_matrix(j, init_numbers[j-1], m) for j in range(1, s*interlacing+1)]

def all_binary_vectors(m):
    arrays = [np.array([0, 1]) for i in range(m)]
    la = len(arrays)
    dtype = np.result_type(*arrays)
    arr = np.empty([len(a) for a in arrays] + [la], dtype=dtype)
    for i, a in enumerate(np.ix_(*arrays)):
        arr[...,i] = a
    return np.transpose(arr.reshape(-1, la))

def generate_points(matrices, interlacing):
    dim = len(matrices) // interlacing
    m = len(matrices[0])
    nb_points = 2**m
    points = np.zeros(shape=(nb_points, dim))
    binary_decomp_points = np.mod(np.dot(matrices, all_binary_vectors(m)), 2)
    
    mult = np.logspace(-1, -(m-1)*interlacing - 1, num=m, endpoint=True, base=2)
    mult2 = np.logspace(0, -interlacing+1, num=interlacing, base=2)
    powers_of_2 = np.outer(mult2, mult)

    for coord in range(0, dim):
        projected_binary_decomp_points = binary_decomp_points[coord*interlacing : (coord+1)*interlacing]
        points[:, coord] = np.einsum('ijk,ij->k', projected_binary_decomp_points, powers_of_2)
    return points

points = generate_points(matrices, interlacing)