
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iostream>

typedef std::vector<unsigned int> GenValue ;
typedef std::pair<unsigned int, unsigned int> PrimitivePolynomial; 
typedef std::vector<std::vector<bool>> BinaryMatrix;

const unsigned int dim = {{s}}; 


// primitive polynomials are hard-coded because their computation is really complex.
static const std::array<unsigned int, dim> degrees =
{ {
    {{degrees}}
} };

static const std::array<unsigned long, dim> representations =
{ {
    {{representations}}
} };

PrimitivePolynomial  nthPrimitivePolynomial(unsigned int n)
{
    return std::pair<unsigned int, unsigned int>(degrees[n-1], representations[n-1]);
}

/** Compute the element-wise product of two vector and reduce the resulting vector using the exclusive or operator.
 * @param a first vector
 * @param b second vector 
 */ 
unsigned int xor_prod_reduce(const std::vector<unsigned int>& a, const std::vector<unsigned int>& b)
{
    unsigned int res = 0;
    unsigned int n = a.size();
    for (unsigned int i = 0; i<n; ++i){
        res ^= a[i]*b[i];
    }
    return res;
}

/** Compute the m-bit binary representation of the given integer. The most significant bit is the leftest non zero
 * bit in the returned vector.
 * @param num non-negative integer
 * @param unsigned int size of the binary representation
 */
std::vector<unsigned int> bin_vector(unsigned int num, unsigned int m)
{
    std::vector<unsigned int> res(m);
    for(unsigned int i = 0; i<m; ++i){
        res[m-i-1] = num % 2;
        num = num >> 1;
    }
    return res;
}

unsigned int getmsb (unsigned long long x){
    unsigned int r = 0;
    if (x < 1) return 0;
    while (x >>= 1) r++;
    return r;
}

int numPoints(const BinaryMatrix& matrix){
    return pow(2, matrix.size());
}

std::vector<unsigned long> getCols(const BinaryMatrix& matrix){
    std::vector<unsigned long> res(matrix.size(), 0);
    for (unsigned int j=0; j<matrix.size(); j++){
        unsigned long s = 0;
        for (unsigned int i=0; i<matrix.size(); i++){
            s += matrix[i][j] << i;
        }
        res[j] = s;
    }
    return res;
}


BinaryMatrix createGeneratingMatrix(const GenValue& genValue, unsigned int m, unsigned int coord) 
    {
        // GeneratingMatrix tmp = new GeneratingMatrix(m,m);
        std::vector<std::vector<bool>> tmp (m, std::vector<bool>(m, 0));

        for(unsigned int k = 0; k<m; ++k){
            tmp[k][k] = 1; // start with identity
        }

        if (coord==1) // special case for the first dimension
        {
            return tmp;
        }

        // compute the vector defining the linear recurrence on the columns of the matrix

        PrimitivePolynomial p = nthPrimitivePolynomial(coord-1);
        auto degree = p.first;
        auto poly_rep = p.second;

        std::vector<unsigned int> a = bin_vector(poly_rep,degree-1);
        a.push_back(1);

        for(unsigned int i = 0; i<degree; ++i){
            a[i] *= 2 << i;
        }

        // initialization of the first columns

        for(unsigned int k = 0; k < std::min(degree,m); ++k){
            auto dirNum = bin_vector(genValue[k],k+1);

            for(unsigned int i = 0; i<k; ++i){
                tmp[i][k] = dirNum[i];
            }
        }

        if (m > degree)
        {
            std::vector<unsigned int> reg(degree); // register for the linear reccurence
            std::reverse_copy(genValue.begin(),genValue.end(), reg.begin()); // should be reversed

            // computation of the recurrence
            for(unsigned int k = degree; k<m; ++k){
                unsigned int new_num = xor_prod_reduce(a,reg) ^ reg[degree-1];
                reg.pop_back();
                reg.insert(reg.begin(),new_num);
                auto dirNum = bin_vector(new_num,k+1);
                for(unsigned int i = 0; i<k; ++i){
                    tmp[i][k] = dirNum[i];
                }
            }
        }

        return tmp;
    }


std::vector<std::vector<double>> points(std::vector<BinaryMatrix> matrices, std::vector<unsigned int> graycode, unsigned int interlacing){
    std::vector<std::vector<double>> points;
    int nbPoints = numPoints(matrices[0]);
    unsigned int m = matrices[0].size();
    unsigned int dim = matrices.size() / interlacing;
    for (int i=0; i<nbPoints; i++){
        points.push_back(std::vector<double>());
    }

    for (int j=0; j < dim; j++){

        std::vector<std::vector<unsigned long>> cols;
        for (int r=0; r < interlacing; r++){
            cols.push_back(getCols(matrices[j*interlacing + r]));
        }

        std::vector<unsigned long> m_permutation = std::vector<unsigned long>(interlacing, 0);
        points[0].push_back(0);
        for (unsigned int n=1; n<nbPoints; ++n){
            for (unsigned int r=0; r < interlacing; r++){
                m_permutation[r] = m_permutation[r] ^ cols[r][graycode[n-1]];
            }
            unsigned int res = 0;
            for (unsigned int i=0; i < interlacing * m; i++){
                res += (((m_permutation[i % interlacing] >> (i / interlacing)) & 1) << (interlacing*m - i - 1));
            } 
            points[n].push_back(((double) res) / (1 << (interlacing * m)));
        }
    }
    return points;
}

int main(){
    unsigned int m = {{m}};
    std::vector<GenValue> genValues {{ genvec }};
    unsigned int interlacing = {{interlacing}};
    std::vector<BinaryMatrix> matrices = std::vector<BinaryMatrix>();
    for (unsigned int i=0; i<dim; i++){
        matrices.push_back(createGeneratingMatrix(genValues[i], m, i+1));
    }

    std::vector<unsigned int> graycode = std::vector<unsigned int>();
    for(unsigned int i=0; i < pow(2, m); i++){
            graycode.push_back(getmsb(((i >> 1) ^ i)^(((i+1) >> 1) ^ (i+1))));
    }

    std::vector<std::vector<double>> myPoints = points(matrices, graycode, interlacing);
    for (unsigned int i=0; i<myPoints.size(); i++){
        for (unsigned int j=0; j<myPoints[0].size(); j++){
            std::cout << myPoints[i][j] << " ";
        }
        std::cout << std::endl;
    }
}
