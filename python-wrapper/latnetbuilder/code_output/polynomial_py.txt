import numpy as np

modulus = {{mod}}
genVector = {{genvec}}
interlacing = {{interlacing}}

def expandSeries(P, h):
    expansion = []
    m = len(P)-1
    for l in range(1, 2*m):
        res = 1 if (m-l >=0 and m-l < len(h) and h[m-l]) else 0
        start = l-m if (l-m > 1) else 1
        for p in range(start, l):
            res = (res + expansion[p-1]*P[m-l+p]) % 2
        expansion.append(res)
    return expansion

def generatingMatrices(modulus, genVector):
    matrices = []
    m = len(modulus)-1
    for j in range(len(genVector)):
        matrix = np.zeros((m, m), dtype=np.int32)
        expansion = expandSeries(modulus, genVector[j])
        for i in range(m):
            for j in range(m):
                matrix[i][j] = expansion[i+j]
        matrices.append(matrix)
    return matrices

points = []
matrices = generatingMatrices(modulus, genVector)
width = matrices[0].shape[0]
dim = len(matrices) // interlacing
nb_points = 2**width
mult = np.array([2**(-k) for k in range(1, width*interlacing + 1)])

for x in range(nb_points):
    x_coord = []
    binary_repr = np.array([((x>>i)&1) for i in range(width)])
    for coord in range(dim):
        prods = [np.mod(matrices[coord * interlacing + r].dot(binary_repr), 2) for r in range(interlacing)]
        x_coord.append(np.array([prods[i % interlacing][i // interlacing] for i in range(width*interlacing)]).dot(mult))
    points.append(x_coord)